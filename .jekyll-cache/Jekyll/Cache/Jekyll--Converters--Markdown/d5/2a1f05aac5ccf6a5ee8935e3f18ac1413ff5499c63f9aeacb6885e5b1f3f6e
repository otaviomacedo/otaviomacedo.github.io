I"è<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?
config=TeX-AMS-MML_HTMLorMML"></script>

<p>Structure:</p>

<ul>
  <li>Introduction etc</li>
  <li>Brief explanation of the program‚Äôs design</li>
  <li>Mention the need to compute the winner</li>
  <li>Describe how this should be done using a diagram</li>
  <li>Show the outcome method and how it relates to the diagram</li>
  <li>This is fine, but the deeper algebraic connection is lost</li>
  <li>Discuss:
    <ul>
      <li>First of all, both are reduce</li>
      <li>How product is associative, commutative and idempotent -&gt; semilattice</li>
      <li>This induces an ordering</li>
      <li>Every subset has a maximal</li>
    </ul>
  </li>
  <li>Refactor with the maximal</li>
  <li>Conclusion: not too big of a deal, but it shows how algebraic structures appear everywhere</li>
</ul>

<hr />

<p>The game is structured into three main abstractions: Board, Game and Player, of which we have two implementations: Computer and User. Conceptually, a game starts with two players and an empty board and unravels it. In other words, it generates a sequence of states (the different board configurations as the game progresses, from beginning to end) corresponding to the alternating moves of the two players.</p>

<p><img src="/assets/ttt-design.png" alt="" /></p>

<p>Let‚Äôs focus on the Board. As the name suggests, it describes a configuration of the game‚Äôs board, that is, which marks are placed on which positions. For example, a particular instance of Board could have the configuration below:</p>

<!-- ![Image showing a winning configuration]() -->

:ET