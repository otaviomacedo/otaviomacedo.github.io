<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-19T13:19:45+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Otavio Macedo</title><entry><title type="html">Semilattices in Tic-Tc-Toe</title><link href="http://localhost:4000/algebra/2020/12/19/semilattices.html" rel="alternate" type="text/html" title="Semilattices in Tic-Tc-Toe" /><published>2020-12-19T06:40:00+00:00</published><updated>2020-12-19T06:40:00+00:00</updated><id>http://localhost:4000/algebra/2020/12/19/semilattices</id><content type="html" xml:base="http://localhost:4000/algebra/2020/12/19/semilattices.html">&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?
config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;

&lt;p&gt;Structure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introduction etc&lt;/li&gt;
  &lt;li&gt;Brief explanation of the program’s design&lt;/li&gt;
  &lt;li&gt;Mention the need to compute the winner&lt;/li&gt;
  &lt;li&gt;Describe how this should be done using a diagram&lt;/li&gt;
  &lt;li&gt;Show the outcome method and how it relates to the diagram&lt;/li&gt;
  &lt;li&gt;This is fine, but the deeper algebraic connection is lost&lt;/li&gt;
  &lt;li&gt;Discuss:
    &lt;ul&gt;
      &lt;li&gt;First of all, both are reduce&lt;/li&gt;
      &lt;li&gt;How product is associative, commutative and idempotent -&amp;gt; semilattice&lt;/li&gt;
      &lt;li&gt;This induces an ordering&lt;/li&gt;
      &lt;li&gt;Every subset has a maximal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Refactor with the maximal&lt;/li&gt;
  &lt;li&gt;Conclusion: not too big of a deal, but it shows how algebraic structures appear everywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;The game is structured into three main abstractions: Board, Game and Player, of which we have two implementations: Computer and User. Conceptually, a game starts with two players and an empty board and unravels it. In other words, it generates a sequence of states (the different board configurations as the game progresses, from beginning to end) corresponding to the alternating moves of the two players.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ttt-design.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s focus on the Board. As the name suggests, it describes a configuration of the game’s board, that is, which marks are placed on which positions. For example, a particular instance of Board could have the configuration below:&lt;/p&gt;

&lt;!-- ![Image showing a winning configuration]() --&gt;

&lt;p&gt;The main question we want Board to answer is: given this configuration, who is the winner (if any)? We can implement this by applying two consecutive transformations to the data:&lt;/p&gt;

&lt;!-- ![Image showing the transformations: blue and green]() --&gt;

&lt;p&gt;In the blue transformation, given a sequence of marks, if they are all equal, we want to output that mark; otherwise, the mark representing the empty cell. In the green transformation, given a sequence of marks, we want to output the first one that we find that is not the empty cell (given the rules of the game, there can be at most one such mark); otherwise, the mark representing the empty cell.&lt;/p&gt;

&lt;p&gt;A possible implementation of this process in Scala is:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outcome&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GameOutcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;⊙&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GameOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GameOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GameOutcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GameOutcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;⊙&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allLines&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diagonals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;flatten&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;isDefined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!-- Briefly talk about the types: GameOutcome, Symbol --&gt;

&lt;p&gt;This is perfectly fine. The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⊙&lt;/code&gt; corresponds to the blue transformation in our diagram and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find(_.isDefined) getOrElse None&lt;/code&gt; in the last line corresponds to the green one. This is the intuitive notion we have about what should happen and more or less matches the verbal description I’ve given for it. But there is a deeper connection between these two transformations that is lost in this particular implementation.&lt;/p&gt;

&lt;p&gt;First off, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; to go from a sequence of symbols to a single symbol in the blue transformation. It would be satisfyingly symmetrical if we could reframe the green one in term of reduction, as well. So, what would that function look like? With a bit of thought and experimentation, we can quickly arrive at the solution. But I would like to take a detour through the land of Abstract Algebra and Order Theory.&lt;/p&gt;

&lt;h2 id=&quot;semilattices&quot;&gt;Semilattices&lt;/h2&gt;

&lt;p&gt;The operation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⊙&lt;/code&gt; has three important properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Idempotence&lt;/strong&gt;: for any symbol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⊙(a, a) == a&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Commutativity&lt;/strong&gt;: for any two symbols &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⊙(a, b) == ⊙(b, a)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Associativity&lt;/strong&gt;: for any three symbols &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⊙(a, ⊙(b, c)) == ⊙(⊙(a, b), c)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Abstract Algebra, sets with an operation that satisfies these three properties is called a semilattice. The interesting thing about a semilattice is that you can use its operation to define a relation ≤ between two elements. Using mathematical notation, this relation is defined as:&lt;/p&gt;

&lt;p&gt;\[
a \odot b = a \iff a \leq b  &lt;br /&gt;
\]&lt;/p&gt;

&lt;p&gt;In other words, if I take any two elements \(a\) and \(b\) and compute the result of the operation \(\odot\) between them, the result may be \(a\) or something else. If it’s \(a\), we say that \(a \leq b\). And vice-versa: if, given two elements \(a\) and \(b\), if we know that \(a \leq b\), then we can conclude that \(a ⊙ b = a\). Now, one important caveat is that, given two elements \(a\) and \(b\), it may just happen that neither \(a \leq b\) nor \(b \leq a\) is true. We simply cannot compare them.&lt;/p&gt;

&lt;p&gt;Mathematicians say that the operation induces a partial order on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameOutcome&lt;/code&gt; set. So we have:&lt;/p&gt;

&lt;p&gt;\(\texttt{\_} \leq a\)
\(a \leq a\)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
\[a \leq a\]
  &lt;/li&gt;
  &lt;li&gt;
\[a \leq a\]
  &lt;/li&gt;
  &lt;li&gt;
\[a \leq a\]
  &lt;/li&gt;
  &lt;li&gt;
\[a \leq a\]
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="algebra" /><summary type="html"></summary></entry><entry><title type="html">Functions and Regular Expressions</title><link href="http://localhost:4000/decidability/2020/12/11/regex.html" rel="alternate" type="text/html" title="Functions and Regular Expressions" /><published>2020-12-11T13:40:00+00:00</published><updated>2020-12-11T13:40:00+00:00</updated><id>http://localhost:4000/decidability/2020/12/11/regex</id><content type="html" xml:base="http://localhost:4000/decidability/2020/12/11/regex.html">Regular expressions are one of those things that bring joy and frustration at the same time to most software developers. At one point or another, we've all written functions to match strings against some regular expression, as part of a bigger function, class, component etc. In this post, I want to show you one of the counterintuitive results from Computability Theory, that involves regular expressions. The code samples are all in Scala, mainly because, in my opinion, it is concise in many respects, but, at the same time, reasonably familiar to a wide audience of developers.

## Terminology

Let's start with some basic Computer Science terminology. If you are familiar with these terms, feel free to skip to the next section.
 
A **language** is any set of strings. A **regular language** is a set of strings that match some regular expression. Conversely, a **non-regular language** is a language for which there is no regular expression that matches all the strings in it.

A function **accepts** a string if it returns `true` for that string[^1]. And we say that a function **recognizes** a language if it returns `true` for all strings in that language and `false` for all others. Some functions, however, can go into an infinite loop and therefore never return either  `true` or `false` for some strings. These functions are obviously undesirable. We are usually more interested in functions that eventually terminate. We call them **deciders**. When a decider recognizes a language, we say that it **decides** that language.

Ok, that's all we need to define for this article.

[^1]: Note about convention: we are only interested in boolean functions in this article. So, every time you see a mention to a function, I implictly mean a function that returns `Boolean`. Also, for simplicity, strings can only contain the characters `'0'` or `'1'`.


## Different classes of functions

So let's say we want to implement a function to recognize the regular language 01&lt;sup&gt;*&lt;/sup&gt;0. That is, the set of all strings that start and end with a 0, with any number of 1s (including none) in the middle. Pretty straightforward to do, using Scala's built-in regular expression support:

```scala
object zerosAtTheEdges extends (String =&gt; Boolean) {
  override def apply(s: String): Boolean = s.matches(&quot;01*0&quot;)
}
```

Another (trivial) example of a regular language is the set of all strings:

```scala
object anything extends (String =&gt; Boolean) {
  override def apply(s: String): Boolean = s.matches(&quot;[01]*&quot;)
}
```

We can also implement a function to recognize non-regular languages, such as 0&lt;sup&gt;_n_&lt;/sup&gt;1&lt;sup&gt;_n_&lt;/sup&gt;. This language is composed of all the strings that start with a certain number of 0s and end with the same number of 1s. How do we know that this language is non-regular? The intuition is basically this: in order to tell whether a string has an equal number of 0s and 1s, you need to count their occurrences. So you need to store this information in memory, somehow. Since the exponent _n_ can be arbitrarily large, we need an arbitrarily large memory. But, when it comes to regular expressions, we can only rely on a finite, pre-determined memory (for example, we can write a regular expression for 0&lt;sup&gt;3&lt;/sup&gt;1&lt;sup&gt;3&lt;/sup&gt; or 0&lt;sup&gt;4&lt;/sup&gt;1&lt;sup&gt;4&lt;/sup&gt; or any other _fixed_ number, but not an arbitrarily large number).

A possible implementation of a function that recognizes 0&lt;sup&gt;_n_&lt;/sup&gt;1&lt;sup&gt;_n_&lt;/sup&gt; is:


```scala
object zerosAndOnes extends (String =&gt; Boolean) {
  override def apply(s: String): Boolean = {
    val (zeros, rest) = s.span(_ == '0')
    zeros.length == rest.length &amp;&amp; rest.forall(_ == '1')
  }
}
```


Some functions may accept or reject certain strings, but go into an infinite loop for all other strings:


```scala
object loop extends (String =&gt; Boolean) {
  override def apply(s: String): Boolean = {
    if (&quot;0000&quot; equals s) true
    else {
      while (true) {}
      false
    }
  }
}
```

Wouldn't it be nice if we could implement some function `f` that received another function `g` as input (after all, Scala makes it easier to deal with higher-order functions) and decided whether `g` recognizes a regular language? This doesn't seem like an easy task, but let's sketch out something to get a feel of what it would look like:


```scala
/**
 * Given a function as input, tells whether 
 * that function recognizes a regular language.
 */
object regularLanguageDecider extends ((String =&gt; Boolean) =&gt; Boolean) {
  override def apply(g: String =&gt; Boolean): Boolean =
    g == zerosAtTheEdges || g == anything
}
```

Obviously we're cheating here. We're assuming that there are only two regular languages in our universe and, for each of these languages, there is only one function that recognizes it. So all we need to do is check the identity of the function to reach a decision. 

If you're uncomfortable with this cheap trick, you can think of more sophisticated ways of inspecting the function `g`. You could consider, for example, using more advanced language features such as reflection or make the decider work on the source code of `g`, so you could do some static analysis and so on. 

Regardless of how we think we might implement it, let's just assume that such a decider already exists and is available in some open source library. We can just import that function in our own code and use it as we see fit. So, from now on, we will not look at its implementation anymore and just treat it as a black box that can be used wherever it's needed.

## A Universal Decider

Let's now consider a different problem: we want to tell whether a function --- any function --- accepts a given string as input. For example, we know that `zerosAtTheEdges` accepts the strings &quot;00&quot;, &quot;010&quot;, &quot;0110&quot; and so on; and it doesn't accept strings like &quot;11&quot; and &quot;000&quot;. In the first case, the function returns `true` and, in the second case, it returns `false`. Similarly, `loop` accepts the string &quot;0000&quot;, but doesn't accept any other string (because, in that case, it goes into an infinite loop).

Can we implement a function to solve this problem? Let's approach this with a Software Engineering mindset. Let's think of the possible cases, write one test for each case at a time, see each test fail and then implement the code to make it pass, doing refactorings along the way, as necessary (a.k.a, Test Driven Development). So our first test would look like this:

```scala
test(&quot;Function accepts its input&quot;) {
  val decider = new UniversalDecider()

  assert(decider.apply(zerosAtTheEdges, &quot;01110&quot;))
}
```

In this first test, we pass two parameters to our system under test: `zerosAtTheEdges` and `&quot;01110&quot;`. Since we know beforehand that `zerosAtTheEdges(&quot;01110&quot;) == true`, our test expects that `decider.apply()` returns `true`. An obvious way to make this test pass is:

```scala
class UniversalDecider() extends ((String =&gt; Boolean, String) =&gt; Boolean) {
  override def apply(fn: (String =&gt; Boolean), input: String): Boolean = 
    fn(input)
}
```

We simply pass the input to the function and return the result! Cool, let's write our second test, then:

```scala
test(&quot;Function does not accept its input&quot;) {
  val decider = new UniversalDecider()

  assert(!decider.apply(zerosAtTheEdges, &quot;11&quot;))
}
```

Without any modification to `UniversalDecider`, this test already passes. Things are looking good! Let's move on to our third and final test:

```scala
test(&quot;Infinite loop&quot;) {
  val decider = new UniversalDecider()

  assert(!decider.apply(loop, &quot;11&quot;))
}
```

We know that `loop` will never terminate when called with the string `&quot;11&quot;`, in which case `decider` should terminate with the value `false`. However, `decider` itself goes into an infinite loop, so our test will eventually fail with a timeout. But all is not lost. We can add a new level of indirection to our code, based on the Factory design pattern:

```scala
trait Factory extends ((String =&gt; Boolean, String) =&gt; (String =&gt; Boolean))
```

This factory receives two parameters, a function and a string, and returns another function. Implementations of this trait should fulfill the following contract: 

* If the function in the first parameter accepts the string in the second parameter, the resulting function (the factory's product, so to speak) recognizes some regular language. It doesn't matter which regular language is recognized by this function.
* Otherwise, the resulting function does not accept any regular language.


Using the idea of Design by Contract, we can rely on this guarantee without having to know anything about any particular implementations of this factory.

OK, so how does this help us? Remember the regular language decider we've built before? It will come in handy now. Let's refactor `UniversalDecider` to this:

```scala
class UniversalDecider(factory: Factory) extends ((String =&gt; Boolean, String) =&gt; Boolean) {
  override def apply(fn: (String =&gt; Boolean), input: String): Boolean =
    regularLanguageDecider(factory(fn, input))
}
``` 

We are now injecting the factory into `UniversalDecider`'s constructor. It's easier to understand what's going on here by looking at it graphically. We can group our three test cases into two scenarios:

![Function accepts the input string](/assets/accept.svg)

![Function does not accept the input string](/assets/not_accept.svg)

In the first scenario, `fn` accepts `input`. The first step is to feed these two parameters to the factory. Given the contract of the factory, it will produce a function that recognizes some regular language. The next step is to feed this function to `regularLanguageDecider`, which, according to its specification, returns `true` in this case. And this is the final result of `UniversalDecider`. 

In the second scenario, `fn` doesn't accept `input`, which makes the factory return a function that doesn't accept a regular language, which makes `regularLanguageDecider` return `false`, which is the final result.

Now we need to refactor our tests accordingly, passing different mock implementations of the factory, depending on the test case:

```scala
test(&quot;Function accepts its input&quot;) {
  val decider = new UniversalDecider((_, _) =&gt; zerosAtTheEdges)

  assert(decider.apply(zerosAtTheEdges, &quot;01110&quot;))
}

test(&quot;Function does not accept its input&quot;) {
  val decider = new UniversalDecider((_, _) =&gt; zerosAndOnes)

  assert(!decider.apply(zerosAtTheEdges, &quot;11&quot;))
}

test(&quot;Function loops forever&quot;) {
  val decider = new UniversalDecider((_, _) =&gt; zerosAndOnes)

  assert(!decider.apply(loop, &quot;11&quot;))
}
```

In the first test, we are injecting into `UniversalDecider` a mock factory that returns `zerosAtTheEdges`, which is a function that accepts the regular language, 01&lt;sup&gt;*&lt;/sup&gt;0, which makes `decider` return `true`. In the other two cases, we are injecting `zerosAndOnes`, which accepts a non-regular language, 0&lt;sup&gt;_n_&lt;/sup&gt;1&lt;sup&gt;_n_&lt;/sup&gt;. This makes `decider` return `false`. Run the tests again and everything is green! Fantastic!

Except that... well, what have we actually accomplished with this? It seems that we just moved the problem somewhere else. We are delegating the hard work to this factory, that we have mocked for the unit tests, but we have no idea how to implement. But notice how the problem is simpler, now. The contract says that, if the input function accepts the string, the output function should accept a regular language. But if the input function does not accept the string, the output function can do _whatever it wants_, as long as it does not accept a regular language. So consider this implementation of `Factory`:

```scala
object nonRegularOrDelegate extends Factory {
  override def apply(f: String =&gt; Boolean, w: String): (String =&gt; Boolean) =
    (s: String) =&gt; zerosAndOnes(s) || f(w)
}
```

The output function can behave in four different ways, depending on the pair (`f`, `w`) used to create it and the input string `s` passed to it at runtime:

|                                                   | `f` accepts `w` | `f`  does not accept  `w` |
|---------------------------------------------------|-----------------|---------------------------|
| `s` matches 0&lt;sup&gt;_n_&lt;/sup&gt;1&lt;sup&gt;_n_&lt;/sup&gt;        | Accept          | Accept                    |
| `s` does not match 0&lt;sup&gt;_n_&lt;/sup&gt;1&lt;sup&gt;_n_&lt;/sup&gt; | Accept          | Reject or Loop            |
| Recognizes a regular language                     | **Yes**         | **No**                    |

If you focus on the columns of this table, you'll see that the last two correspond to the two different types of functions that can be generated. When `f` accepts `w`, the generated function accepts _all strings_ passed to it. Since the set of all strings is a regular language, the generated function recognizes a regular language. When `f` does not accept `w`, the function accepts all strings that match the pattern 0&lt;sup&gt;_n_&lt;/sup&gt;1&lt;sup&gt;_n_&lt;/sup&gt;, but for all other strings it will either reject or loop. In other words, it recognizes a non-regular language. Therefore, our implementation fulfills the contract we specified earlier. If we come back to our unit tests and replace the mocks with `nonRegularOrDelegate` in all cases, they should all pass. 

## Contradiction

Let's recap what we've done so far: we are assuming that there is a decider for regular languages out there in the world. We imported that decider and, with just a few lines of simple code around it, we managed to implement a function that can tell wether another function accepts a given string.

But here's the contradiction: a function like `UniversalDecider` does not, and cannot, exist (to understand why, wait for the second part of this post). How is this possible? We have certainly built this function. Its implementation is clear and simple. There are even unit tests to prove that it works, in case there were any doubts. So there remains only one possibility: our assumption that there exists a decider for regular languages is false: it's impossible to implement a function that can tell whether another function recognizes a regular language!

This result can be disheartening, because it shows some computational limits involving things that are as familiar as regular expressions. On the other hand, there is a sort of logical beauty to this construction that fascinates me every time I think about it. The complete source code is [here](https://github.com/otaviomacedo/turing).

---</content><author><name></name></author><category term="decidability" /><summary type="html">Regular expressions are one of those things that bring joy and frustration at the same time to most software developers. At one point or another, we’ve all written functions to match strings against some regular expression, as part of a bigger function, class, component etc. In this post, I want to show you one of the counterintuitive results from Computability Theory, that involves regular expressions. The code samples are all in Scala, mainly because, in my opinion, it is concise in many respects, but, at the same time, reasonably familiar to a wide audience of developers.</summary></entry></feed>